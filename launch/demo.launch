<!-- Do not launch this in virtualenv -->
<!-- fake_mask_generator & fake_kinect2 should be open in virtualenv 'mask_rcnn'  -->
<!-- mask_generator should be open in virtualenv 'mask_rcnn' -->

<launch>
  <!-- arguments -->
  <arg name="is_use_rviz_demo" default="true" />
  <arg name="is_use_gazebo_sim" default="false" />
  <arg name="is_use_real_mico" default="false" />

  <arg name="is_discard_object" default="false" />
  <arg name="is_discard_obstacle" default="false" />  


  <arg name="is_use_naive_pose_goal" default="true" 
          doc="'true' for use naive_pose_goal, 'false' for use GPD" />
  <arg name="is_pose_goal_fixed" default="false" 
          doc="fixed pose goal, for debug use" />

  <arg name="GPD_num_selected" default="20" />
  <arg name="is_filter_pointcloud" default="true" />
  <arg name="grasp_detection_topic" default="/detect_grasps/clustered_grasps" />
  <arg name="tf_cam" default="0.580962087492 0.0651224924142 0.37562071577 -0.29227172725 -0.771322050498 0.535448584394 0.181478222761" />

  <!-- **************************************** -->

  <!-- Frames setup - 'to_camera_frame' transformation comes from calibration -->
  <node name="to_mico_base" pkg="tf2_ros" type="static_transform_publisher" args="0 0 0 0 0 0 1 mdworld world" />
  <!-- <node name="to_camera_frame" pkg="tf2_ros" type="static_transform_publisher" args="0 0.1 0.4 0 3.1415926 1.0 mdworld camera_frame" 
      if="$(eval arg('is_use_rviz_demo') or arg('is_use_gazebo_sim'))" /> -->

  <!-- <node name="to_camera_frame" pkg="tf2_ros" type="static_transform_publisher" 
      args="$(arg tf_cam) mdworld camera_frame" 
      if="$(arg is_use_real_mico)"/> -->
  <node name="to_camera_frame" pkg="tf2_ros" type="static_transform_publisher" 
      args="$(arg tf_cam) mdworld camera_frame" />



  <!-- coordinator node -->
  <node name="unknown_pick_coordinator" pkg="unknown_pick" type="coordinator.py" />


  <!-- basic environment in RViz -->
  <node name="basic_mico_environment" pkg="mico_interaction" type="basic_mico_environment.py" output="screen" />
  <!-- MoveIt! RViz demo -->
  <include file="$(find moveit_generated)/launch/demo.launch" if="$(arg is_use_rviz_demo)" />
  <!-- Gazebo Sim and Rviz -->
  <include file="$(find mico_interaction)/launch/mico_moveit_sim.launch" if="$(arg is_use_gazebo_sim)" />

  <!-- segment cloud -->
  <node name="cloud_segmentor" pkg="unknown_pick" type="segment_cloud_v3" output="screen">
    <rosparam file="$(find unknown_pick)/config/cam_intrinsic.yaml" command="load" /> 

    <remap from="/cloud_object" to="/cloud_object/unfiltered" if="$(eval arg('is_filter_pointcloud') and not arg('is_discard_object'))" />
    <remap from="/cloud_object" to="/cloud_object_whatever" if="$(eval arg('is_filter_pointcloud') and arg('is_discard_object'))" />
    <remap from="/cloud_obstacle" to="/cloud_obstacle/unfiltered" if="$(eval arg('is_filter_pointcloud') and not arg('is_discard_obstacle'))" />
    <remap from="/cloud_obstacle" to="/cloud_obstacle_whatever" if="$(eval arg('is_filter_pointcloud') and arg('is_discard_obstacle'))" />
  </node>

  <!-- pcl filter nodelets -->
  <include file="$(find unknown_pick)/launch/pcl_filter.launch" if="$(arg is_filter_pointcloud)" >
  </include>


  <!-- Generate grasp pose -->
  <group if="$(arg is_use_naive_pose_goal)">
    <!-- naive pose goal generator -->
    <node name="pose_goal_generator" pkg="unknown_pick" type="gen_naive_pose" output="screen" />
  </group>

  <group unless="$(arg is_use_naive_pose_goal)">
    <!-- GPD package - generate suitable grasps -->
    <include file="$(find unknown_pick)/helper/grasp_detector.launch" >
      <arg name="num_selected" default="$(arg GPD_num_selected)" />
    </include> 
    <!-- pose goal generator - convert GPD format into a pose -->
    <node name="pose_goal_generator" pkg="unknown_pick" type="pose_goal_generator.py" output="screen" >
      <param name="is_pose_goal_fixed" value="$(arg is_pose_goal_fixed)" />
      <param name="grasp_detection_topic" value="$(arg grasp_detection_topic)" />
    </node>
  </group>


  <!-- Use MoveIt! command to config robot arm -->
  <node name="moveit_grasp" pkg="unknown_pick" type="moveit_grasp.py" output="screen"/>

</launch>
